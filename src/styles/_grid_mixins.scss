@mixin build_media_queries($breakpoint) {

  @if (requires-media-query($breakpoint)) {
    @media (min-width: breakpoint-value($breakpoint)) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin build_only_media_queries($breakpoint) {

  @if (requires-only-media-query($breakpoint)) {
    @media (min-width: breakpoint-value($breakpoint)) and (max-width: next-breakpoint-value($breakpoint) - 1px) {
      @content;
    }
  }
}

@mixin build_down_media_queries($breakpoint) {

  @if (requires-down-media-query($breakpoint)) {
    @media (max-width: breakpoint-value($breakpoint) - 1px) {
      @content;
    }
  }
}

@mixin build_grows($breakpoint, $only: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }

  @for $grow_level from 1 through $grow_levels {
    .grow_#{$grow_level}#{$extension} {
      flex: #{$grow_level};
    }
  }
}

@mixin build_flex_rows($breakpoint, $only: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }

  .flex#{$extension} {
    display: flex;
  }
}

@mixin build_alignments($breakpoint, $only: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }

  .space_between#{$extension} {
    justify-content: space-between;
  }

  .space_around#{$extension} {
    justify-content: space-around;
  }

  .align_start#{$extension} {
    justify-content: flex-start;
  }

  .align_end#{$extension} {
    justify-content: flex-end;
  }

  .align_center#{$extension} {
    justify-content: center;
  }
}

@mixin build_shorthands($breakpoint, $only: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }

  @for $shorthand_level from 2 through 12 {
    .#{shorthand-name($shorthand_level)}#{$extension} {
      display: flex;

      > .flex_item {
        flex: 0 0 auto;
        width: #{percentage(1 / $shorthand_level)};
      }

      &[class*='gutter'] > .flex_item {
        flex: 0 0 auto;
        width: calc(#{percentage(1 / $shorthand_level)} - #{$grid_gutter_x} * 2);
      }
    }
  }
};

@mixin build_across_helpers($shorthand_level, $breakpoint, $only: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }

  // Allows a flex_item to fill the row when .two_across > .across_4
  [class*='_across'] {
     > .flex_item[class*='across_'] {
      flex: 0 0 auto;
      width: 100%;
    }

    &[class*='gutter'] {
      > .flex_item[class*='across_'] {
        flex: 0 0 auto;
        width: calc(100% - #{$grid_gutter_x} * 2);
     }
    }
  }

  @for $across_level from 2 through 12 {
    @if $across_level < $shorthand_level {
      .row.#{shorthand-name($shorthand_level)}#{$extension} {
        > .flex_item {
          &.across_#{$across_level} {
            flex: 0 0 auto;
            width: #{percentage($across_level / $shorthand_level)};
          }
        }

        &[class*='gutter'] > .flex_item {
          &.across_#{$across_level} {
            flex: 0 0 auto;
            width: calc(#{percentage($across_level / $shorthand_level)} - #{$grid_gutter_x} * 2);
          }
        }
      }
    }
  }

}

@mixin build_shorthand_grows($breakpoint, $only: false) {
  $extension: breakpoint-extension($breakpoint);
  @for $grow_level from 2 through $grow_levels {
    $shorthand: shorthand-name($grow_level);
    @for $i from 2 through $grow_level {
      [class*='#{$shorthand}'] > .grow_#{$i}#{$extension} {
        flex: 0 0 auto;
        width: calc(#{percentage(1 / $grow_level)} * #{$i});
      }
    }
  }
}


@mixin build_order_helpers($breakpoint, $only: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }

  @for $order_level from -6 through 6 {
    .order_#{$order_level}#{$extension} {
      order: $order_level;
    }
  }
}

@mixin build_hidden_helpers($breakpoint, $only: false, $down: false) {

  $extension: breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: breakpoint-only-extension($breakpoint);
  }
  @if ($down) {
    $extension: breakpoint-down-extension($breakpoint);
  }

  .hide#{$extension} {
    display: none !important;
  }
}

@mixin build_spacing_helpers($grow_level, $breakpoint, $only: false) {

  $extension: grow-extension($grow_level) + breakpoint-extension($breakpoint);
  @if ($only) {
    $extension: grow-extension($grow_level) + breakpoint-only-extension($breakpoint);
  }

  $spacers: 'margin', 'padding';

  @each $spacer in $spacers {
    $spacer_keys: map-keys($margins);
    $space: $margin;
    @if $spacer == 'padding' {
      $spacer_keys: map-keys($paddings);
      $space: $padding;
    }
    @each $spacer_key in $spacer_keys {
      $spacer_name: margin-name($spacer_key);
      @if $spacer == 'padding' {
        $spacer_name: padding-name($spacer_key);
      }

      .#{$spacer_name}#{$extension} {
        @if $spacer_key == 'center' {
          @if $spacer == 'margin' {
            margin-left: auto;
            margin-right: auto;
          }
        } @elseif $spacer_key == 'all' {
          #{$spacer}: $space * $grow_level;
        } @elseif $spacer_key == 'x' {
          #{$spacer}-left: $space * $grow_level;
          #{$spacer}-right: $space * $grow_level;
        } @elseif $spacer_key == 'y' {
          #{$spacer}-bottom: $space * $grow_level;
          #{$spacer}-top: $space * $grow_level;
        } @else {
          $attribute: #{$spacer}-#{$spacer_key};
          #{$attribute}: $margin * $grow_level;
        }
      }
    }
  }

}
