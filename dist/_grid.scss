@function breakpoint-value($key) {
  @if map-has-key($breakpoints, $key) {
    @return map-get($breakpoints, $key);
  }
}

@function shorthand-name($key) {
  @if map-has-key($shorthands, $key) {
    @return map-get($shorthands, $key);
  }
}

@function requires-media-query($key) {
  @if (breakpoint-value($key) == 0) {
    @return false;
  }
  @return true;
}

@function requires-extension($key) {
  @if (requires-media-query($key)) {
    @return '_#{$key}';
  }
  @return '';
}

.row, .row * {
  box-sizing: border-box;
}

.gutter {
  padding: .01% 0;
}

.row {
  display: block;
  flex-flow: row wrap;

  &.gutter > .flex_item {
    margin: $grid_gutter_y $grid_gutter_x;
  }

  > .full_width {
    width: 100%;
  }
}

@mixin build_media_queries($key) {
  @if (requires-media-query($key)) {
    @media (min-width: breakpoint-value($key)) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin build_growth($key) {
  @for $i from 1 through $growth_levels {
    .grow_#{$i}#{requires-extension($key)} {
      flex: #{$i};
    }
  }
}

@mixin build_alignments($key) {
  .space_between#{requires-extension($key)} {
    justify-content: space-between;
  }

  .space_around#{requires-extension($key)} {
    justify-content: space-around;
  }

  .align_start#{requires-extension($key)} {
    justify-content: flex-start;
  }

  .align_end#{requires-extension($key)} {
    justify-content: flex-end;
  }

  .align_center#{requires-extension($key)} {
    justify-content: center;
  }
}

$shorthands: (
  2: 'two_across',
	3: 'three_across',
	4: 'four_across',
);

@mixin build_across_shorthands($growth_level, $key) {
  .#{shorthand-name($growth_level)}#{requires-extension($key)} {
    display: flex;

    > .flex_item {
      flex-basis: #{percentage(1 / $growth_level)};
    }

    &.gutter > .flex_item {
      flex-basis: calc(#{percentage(1 / $growth_level)} - #{$grid_gutter_x} * 2);
    }
  }
};

@mixin build_across($key) {
  @for $growth_level from 2 through $growth_levels {
    @include build_across_shorthands($growth_level, $key);
  }
}

@mixin build_across_growth() {
  @for $growth_level from 2 through $growth_levels {
    $shorthand_name: shorthand-name($growth_level);
    @for $i from 2 through $growth_level {
      @each $key in map-keys($breakpoints) {
        $extension: requires-extension($key);

        @include build_media_queries($key) {
          [class*='#{$shorthand_name}'] > .grow_#{$i}#{$extension} {
            flex-basis: calc(#{percentage(1 / $growth_level)} * #{$i});
          }
        }
      }
    }
  }
}

@mixin build_flex_row($key) {
  .flex#{requires-extension($key)} {
    display: flex;
  }
}

// BUIlD EVERYTHING
@each $key in map-keys($breakpoints) {
  @include build_media_queries($key) {
    @include build_growth($key);
    @include build_flex_row($key);
    @include build_across($key);
    @include build_alignments($key);
  }
}
@include build_across_growth();
